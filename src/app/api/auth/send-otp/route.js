import { NextResponse } from 'next/server';
// Removed: import twilio from 'twilio';

// Infobip Configuration
const INFOBIP_BASE_URL = process.env.INFOBIP_BASE_URL;
const INFOBIP_API_KEY = process.env.INFOBIP_API_KEY;
const INFOBIP_2FA_APPLICATION_ID = process.env.INFOBIP_2FA_APPLICATION_ID;
const INFOBIP_2FA_MESSAGE_ID = process.env.INFOBIP_2FA_MESSAGE_ID;

// In-memory store for OTPs (for demonstration purposes)
// In a production app, use Redis or a database for this
const otpStore = new Map();

function generateOTP() {
  // Generate a 4-digit OTP to match Infobip message template pinLength
  return Math.floor(1000 + Math.random() * 9000).toString(); 
}

export async function POST(request) {
  if (!INFOBIP_BASE_URL || !INFOBIP_API_KEY || !INFOBIP_2FA_APPLICATION_ID || !INFOBIP_2FA_MESSAGE_ID) {
    console.error('Infobip environment variables are not fully set.', {
        baseUrlExists: !!INFOBIP_BASE_URL,
        apiKeyExists: !!INFOBIP_API_KEY,
        appIdExists: !!INFOBIP_2FA_APPLICATION_ID,
        messageIdExists: !!INFOBIP_2FA_MESSAGE_ID
    });
    return NextResponse.json({ error: 'Infobip SMS service not configured properly.' }, { status: 500 });
  }

  try {
    const { phoneNumber } = await request.json();

    if (!phoneNumber) {
      return NextResponse.json({ error: 'Phone number is required' }, { status: 400 });
    }

    // Ensure phone number is in a format Infobip expects (e.g., E.164 without leading + for `to` field sometimes, or with it)
    // Infobip's Send SMS API usually wants the number without the leading `+` for the `to` field.
    // Let's remove it if present for the `to` field, but keep it for storing/validation.
    const normalizedPhoneNumberForInfobip = phoneNumber.replace(/^\+/, '');
    const validatedPhoneNumberE164 = phoneNumber.startsWith('+') ? phoneNumber : `+${phoneNumber}`;
    
    if (!/^\+[1-9]\d{1,14}$/.test(validatedPhoneNumberE164)) {
       return NextResponse.json({ error: 'Invalid phone number format.' }, { status: 400 });
    }

    const otp = generateOTP();
    const expiry = Date.now() + 10 * 60 * 1000; // OTP valid for 10 minutes

    // Store OTP with the E.164 phone number and expiry
    otpStore.set(validatedPhoneNumberE164, { otp, expiry });

    const infobipApiUrl = `${INFOBIP_BASE_URL}/2fa/2/pin`;
    const infobipHeaders = new Headers();
    infobipHeaders.append("Authorization", `App ${INFOBIP_API_KEY}`);
    infobipHeaders.append("Content-Type", "application/json");
    infobipHeaders.append("Accept", "application/json");

    const infobipBody = JSON.stringify({
      "applicationId": INFOBIP_2FA_APPLICATION_ID,
      "messageId": INFOBIP_2FA_MESSAGE_ID,
      "to": normalizedPhoneNumberForInfobip, // Send to the number without leading +
      // The actual PIN is generated by Infobip based on the template and sent directly.
      // We don't send the PIN itself here; Infobip generates it and uses the {{pin}} placeholder.
    });

    const infobipRequestOptions = {
        method: "POST",
        headers: infobipHeaders,
        body: infobipBody,
        redirect: "follow"
    };

    const infobipResponse = await fetch(infobipApiUrl, infobipRequestOptions);
    const infobipResultText = await infobipResponse.text();

    if (!infobipResponse.ok) {
        console.error('Infobip API Error:', infobipResponse.status, infobipResultText);
        let errorMessage = 'Failed to send OTP via Infobip.';
        try {
            const errorJson = JSON.parse(infobipResultText);
            errorMessage = errorJson?.requestError?.serviceException?.text || errorJson?.requestError?.serviceException?.messageId || errorMessage;
        } catch (e) { /* Ignore parsing error, use generic message */ }
        return NextResponse.json({ error: errorMessage, details: infobipResultText }, { status: infobipResponse.status });
    }

    let pinId = null;
    try {
        const resultJson = JSON.parse(infobipResultText);
        pinId = resultJson.pinId; // Capture pinId for potential verification later if needed by your flow
        console.log("Infobip Send PIN Response:", resultJson);
    } catch(e) {
        console.warn("Could not parse Infobip success response as JSON:", infobipResultText);
    }

    console.log(`OTP for ${validatedPhoneNumberE164} (pinId: ${pinId}) initiated via Infobip. Stored OTP for our own validation: ${otp}`); 

    return NextResponse.json({ message: 'OTP sent successfully' });

  } catch (error) {
    console.error('Error in send-otp route:', error);
    return NextResponse.json({ error: 'Internal server error while sending OTP', details: error.message }, { status: 500 });
  }
} 