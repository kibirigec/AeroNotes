import supabase from './supabase';

// Table names
const NOTES_TABLE = 'notes';

// Fetch all notes for the current user
export const fetchNotes = async () => {
  const { data, error } = await supabase
    .from(NOTES_TABLE)
    .select('*')
    .order('created_at', { ascending: false });
  
  if (error) {
    console.error('Error fetching notes:', error);
    throw error;
  }
  
  return data;
};

// Create a new note
export const createNote = async (text) => {
  // Get the current user
  const { data: { user } } = await supabase.auth.getUser();
  
  if (!user) {
    throw new Error('You must be logged in to create a note');
  }
  
  // Primary attempt with autoDelete (camelCase)
  const { data, error } = await supabase
    .from(NOTES_TABLE)
    .insert([
      { 
        content: text,
        autoDelete: true, // Use camelCase
        created_at: new Date().toISOString(),
        user_id: user.id
      }
    ])
    .select();
  
  if (error) {
    console.error('Error creating note:', error);
    // If this fails, it will throw the error directly. 
    // The original error message indicates 'auto_delete' in the `columns` param of the URL was the issue.
    // This implies that the insert might succeed with autoDelete, but the select or subsequent operations fail
    // if the schema cache expects 'auto_delete'.
    // By removing the fallback that *explicitly uses* 'auto_delete' in the insert object
    // and in the ?columns= parameter which is generated by .select(), we avoid the direct error.
    // The root cause is likely the schema inconsistency, and this change makes the client consistent with 'autoDelete'.
    throw error;
  }
  
  return data[0];
};

// Toggle auto-delete for a note
export const toggleNoteAutoDelete = async (id, autoDelete) => {
  // Primary attempt with autoDelete (camelCase)
  const { data, error } = await supabase
    .from(NOTES_TABLE)
    .update({
      autoDelete: autoDelete, // Use camelCase
      created_at: autoDelete ? new Date().toISOString() : undefined,
    })
    .eq('id', id)
    .select();
  
  if (error) {
    console.error('Error toggling note auto-delete:', error);
    // Similar to createNote, we remove the fallback.
    // If 'autoDelete' is the correct column name in the DB, this should work.
    // If not, this will fail, and the error will indicate the problem with 'autoDelete'.
    throw error;
  }
  
  return data[0];
};

// Delete a note
export const deleteNote = async (id) => {
  const { error } = await supabase
    .from(NOTES_TABLE)
    .delete()
    .eq('id', id);
  
  if (error) {
    console.error('Error deleting note:', error);
    throw error;
  }
  
  return true;
}; 